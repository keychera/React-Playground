{"version":3,"sources":["index.js"],"names":["Square","value","onClick","className","Board","squares","handleClick","renderSquare","i","Game","status","useState","Array","fill","history","setHistory","xIsNext","setXIsNext","isGameOver","setIsGameOver","currentMove","setCurrentMove","currentHistory","slice","currentSquares","winner","lines","length","a","b","c","calculateWinner","moves","map","step","move","desc","key","jumpTo","newSquares","concat","ReactDOM","render","document","getElementById"],"mappings":"2NAwBMA,G,MAAS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvB,OACE,4BACEC,UAAU,SACVD,QAASA,GAERD,KAKDG,EAAQ,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAElBC,EAAe,SAACC,GAAD,OACnB,kBAACR,EAAD,CACEC,MAAOI,EAAQG,GACfN,QAAS,kBAAMI,EAAYE,OAI/B,OACE,6BACE,yBAAKL,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,MAMhBE,EAAO,WAAO,IAuBdC,EAvBa,EAEaC,mBAAS,CAAC,CAAEN,QAASO,MAAM,GAAGC,KAAK,SAFhD,mBAEVC,EAFU,KAEDC,EAFC,OAGaJ,oBAAS,GAHtB,mBAGVK,EAHU,KAGDC,EAHC,OAImBN,oBAAS,GAJ5B,mBAIVO,EAJU,KAIEC,EAJF,OAKqBR,mBAAS,GAL9B,mBAKVS,EALU,KAKGC,EALH,KAOXC,EAAiBR,EAAQS,MAAM,EAAGH,EAAc,GAChDI,EAAiBF,EAAeF,GAchCK,EAnFgB,SAACpB,GAWvB,IAVA,IAAMqB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAlB,EAAI,EAAGA,EAAIkB,EAAMC,OAAQnB,IAAK,CAAC,IAAD,cACnBkB,EAAMlB,GADa,GAC9BoB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIzB,EAAQuB,IAAMvB,EAAQuB,KAAOvB,EAAQwB,IAAMxB,EAAQuB,KAAOvB,EAAQyB,GACpE,OAAOzB,EAAQuB,GAGnB,OAAO,KAkEQG,CAAgBP,EAAenB,SAE1CoB,GACGP,GAAcC,GAAc,GACjCT,EAAM,kBAAce,KAEhBP,GAAcC,GAAc,GAChCT,EAAM,uBAAmBM,EAAU,IAAM,MAG3C,IAKMgB,EAAQV,EAAeW,KAAI,SAACC,EAAMC,GACtC,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACJ,OACE,wBAAIE,IAAKF,GACP,4BAAQjC,QAAS,kBAXR,SAACiC,GACdd,EAAec,GACflB,EAAYkB,EAAO,IAAO,GASCG,CAAOH,KAAQC,OAK5C,OACE,yBAAKjC,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACC,EAAU,CAAEC,QAASmB,EAAenB,QAASC,YAzChC,SAACE,GACnB,IAAM+B,EAAaf,EAAenB,QAAQkB,QACrCL,GAAeqB,EAAW/B,KAC7B+B,EAAW/B,GAAKQ,EAAU,IAAM,IAChCD,EAAWO,EAAekB,OAAO,CAAC,CAChCnC,QAASkC,MAEXtB,GAAYD,GACZK,EAAeC,EAAeK,aAmC9B,yBAAKxB,UAAU,aACb,6BAAMO,GACN,4BAAKsB,MAQbS,IAASC,OACP,kBAACjC,EAAD,MACAkC,SAASC,eAAe,W","file":"static/js/main.b2bb60f6.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nconst Square = ({ value, onClick }) => {\n  return (\n    <button\n      className=\"square\"\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  )\n}\n\nconst Board = ({ squares, handleClick }) => {\n\n  const renderSquare = (i) => (\n    <Square\n      value={squares[i]}\n      onClick={() => handleClick(i)}\n    />\n  )\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  )\n}\n\nconst Game = () => {\n\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null) }])\n  const [xIsNext, setXIsNext] = useState(true)\n  const [isGameOver, setIsGameOver] = useState(false)\n  const [currentMove, setCurrentMove] = useState(0)\n\n  const currentHistory = history.slice(0, currentMove + 1)\n  const currentSquares = currentHistory[currentMove]\n\n  const handleClick = (i) => {\n    const newSquares = currentSquares.squares.slice()\n    if (!isGameOver && !newSquares[i]) {\n      newSquares[i] = xIsNext ? 'X' : 'O'\n      setHistory(currentHistory.concat([{\n        squares: newSquares\n      }]))\n      setXIsNext(!xIsNext)\n      setCurrentMove(currentHistory.length)\n    }\n  }\n\n  const winner = calculateWinner(currentSquares.squares)\n  let status\n  if (winner) {\n    if (!isGameOver) { setIsGameOver(true) }\n    status = `Winner: ${winner}`\n  } else {\n    if (isGameOver) { setIsGameOver(false) }\n    status = `Next player: ${xIsNext ? 'X' : 'O'}`\n  }\n\n  const jumpTo = (move) => {\n    setCurrentMove(move)\n    setXIsNext((move % 2) === 0)\n  }\n\n  const moves = currentHistory.map((step, move) => {\n    const desc = move\n      ? 'Go to move #' + move\n      : 'Go to game start'\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    )\n  })\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board {...{ squares: currentSquares.squares, handleClick }} />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  )\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}